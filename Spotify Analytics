# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#Which artists have the most songs on the spotify top 50?

SELECT artist_name, count(artist_name)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY count(artist_name) desc
LIMIT 5;

#What is the average danceability, energy, and loudness of tracks for each artist?

SELECT artist_name,
ROUND(AVG(danceability),2) AS avg_danceability,
ROUND(AVG(energy),2) AS avg_energy,
ROUND(AVG(loudness),2) AS avg_loudness
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

#Which tracks have a danceability score above 0.8 and a tempo greater than 120 BPM?

SELECT artist_name, track_name, danceability, tempo
FROM BIT_DB.Spotifydata
WHERE danceability > 0.8 AND tempo > 120;


#Which artists have tracks with a tempo higher than the average tempo across all tracks?

SELECT artist_name, track_name, tempo
FROM BIT_DB.Spotifydata
WHERE tempo > (SELECT AVG(tempo) FROM BIT_DB.Spotifydata);
